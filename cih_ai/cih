import openai
import os
import logging
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, CallbackContext
from telegram.ext import Filters

# Set up OpenAI API key
openai_api_key = os.environ.get('aitools')  # Assuming 'aitools' is the name of your environment variable
if not openai_api_key:
    raise ValueError("OpenAI API key is not set in the environment variables.")
openai.api_key = openai_api_key


# Set up Telegram bot token
TELEGRAM_TOKEN = os.environ.get('telegramBot')  # Assuming 'TELEGRAM_BOT_TOKEN' is the name of your environment variable
if not TELEGRAM_TOKEN:
    raise ValueError("Telegram bot token is not set in the environment variables.")


# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

def start(update: Update, context: CallbackContext) -> None:
    """Send a message when the command /start is issued."""
    update.message.reply_text('Hi! How can I assist you today?')

def handle_cid_command(update: Update, context: CallbackContext) -> None:
    """Handle /CID command."""
    question = ' '.join(context.args)
    if not question:
        update.message.reply_text('Please provide a question after /CID. For example, "/CID What is the capital of France?"')
        return

    response_message = gpt_response(question)
    update.message.reply_text(response_message)

def gpt_response(question):
    """Function to get a response from the GPT model based on the user's message."""
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {
                "role": "system",
                "content": "You are an assistant trained on a specific information base. Provide answers based on that data."
            },
            {
                "role": "user",
                "content": question
            }
        ]
    )
    return response.choices[0].message['content']

def echo(update: Update, context: CallbackContext) -> None:
    """Echo the user's message."""
    update.message.reply_text(update.message.text)

def main():
    """Start the bot."""
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("CID", handle_cid_command))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, echo))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
